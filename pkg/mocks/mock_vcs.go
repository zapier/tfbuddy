// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vcs "github.com/zapier/tfbuddy/pkg/vcs"
)

// MockGitClient is a mock of GitClient interface.
type MockGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitClientMockRecorder
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient.
type MockGitClientMockRecorder struct {
	mock *MockGitClient
}

// NewMockGitClient creates a new mock instance.
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
	mock := &MockGitClient{ctrl: ctrl}
	mock.recorder = &MockGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
	return m.recorder
}

// AddMergeRequestDiscussionReply mocks base method.
func (m *MockGitClient) AddMergeRequestDiscussionReply(ctx context.Context, mrIID int, project, discussionID, comment string) (vcs.MRNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMergeRequestDiscussionReply", ctx, mrIID, project, discussionID, comment)
	ret0, _ := ret[0].(vcs.MRNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMergeRequestDiscussionReply indicates an expected call of AddMergeRequestDiscussionReply.
func (mr *MockGitClientMockRecorder) AddMergeRequestDiscussionReply(ctx, mrIID, project, discussionID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMergeRequestDiscussionReply", reflect.TypeOf((*MockGitClient)(nil).AddMergeRequestDiscussionReply), ctx, mrIID, project, discussionID, comment)
}

// CloneMergeRequest mocks base method.
func (m *MockGitClient) CloneMergeRequest(arg0 context.Context, arg1 string, arg2 vcs.MR, arg3 string) (vcs.GitRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneMergeRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(vcs.GitRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (m *MockGitClient) GetOldRunUrls(ctx context.Context, mrIID int, project string, rootNoteID int) (string, error) {
	return "", nil
}
// CloneMergeRequest indicates an expected call of CloneMergeRequest.
func (mr *MockGitClientMockRecorder) CloneMergeRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneMergeRequest", reflect.TypeOf((*MockGitClient)(nil).CloneMergeRequest), arg0, arg1, arg2, arg3)
}

// CreateMergeRequestComment mocks base method.
func (m *MockGitClient) CreateMergeRequestComment(ctx context.Context, id int, fullPath, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMergeRequestComment", ctx, id, fullPath, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMergeRequestComment indicates an expected call of CreateMergeRequestComment.
func (mr *MockGitClientMockRecorder) CreateMergeRequestComment(ctx, id, fullPath, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequestComment", reflect.TypeOf((*MockGitClient)(nil).CreateMergeRequestComment), ctx, id, fullPath, comment)
}

// CreateMergeRequestDiscussion mocks base method.
func (m *MockGitClient) CreateMergeRequestDiscussion(ctx context.Context, mrID int, fullPath, comment string) (vcs.MRDiscussionNotes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMergeRequestDiscussion", ctx, mrID, fullPath, comment)
	ret0, _ := ret[0].(vcs.MRDiscussionNotes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMergeRequestDiscussion indicates an expected call of CreateMergeRequestDiscussion.
func (mr *MockGitClientMockRecorder) CreateMergeRequestDiscussion(ctx, mrID, fullPath, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequestDiscussion", reflect.TypeOf((*MockGitClient)(nil).CreateMergeRequestDiscussion), ctx, mrID, fullPath, comment)
}

// GetMergeRequest mocks base method.
func (m *MockGitClient) GetMergeRequest(arg0 context.Context, arg1 int, arg2 string) (vcs.DetailedMR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(vcs.DetailedMR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeRequest indicates an expected call of GetMergeRequest.
func (mr *MockGitClientMockRecorder) GetMergeRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequest", reflect.TypeOf((*MockGitClient)(nil).GetMergeRequest), arg0, arg1, arg2)
}

// GetMergeRequestApprovals mocks base method.
func (m *MockGitClient) GetMergeRequestApprovals(ctx context.Context, id int, project string) (vcs.MRApproved, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeRequestApprovals", ctx, id, project)
	ret0, _ := ret[0].(vcs.MRApproved)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeRequestApprovals indicates an expected call of GetMergeRequestApprovals.
func (mr *MockGitClientMockRecorder) GetMergeRequestApprovals(ctx, id, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestApprovals", reflect.TypeOf((*MockGitClient)(nil).GetMergeRequestApprovals), ctx, id, project)
}

// GetMergeRequestModifiedFiles mocks base method.
func (m *MockGitClient) GetMergeRequestModifiedFiles(ctx context.Context, mrIID int, projectID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeRequestModifiedFiles", ctx, mrIID, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeRequestModifiedFiles indicates an expected call of GetMergeRequestModifiedFiles.
func (mr *MockGitClientMockRecorder) GetMergeRequestModifiedFiles(ctx, mrIID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestModifiedFiles", reflect.TypeOf((*MockGitClient)(nil).GetMergeRequestModifiedFiles), ctx, mrIID, projectID)
}

// GetPipelinesForCommit mocks base method.
func (m *MockGitClient) GetPipelinesForCommit(ctx context.Context, projectWithNS, commitSHA string) ([]vcs.ProjectPipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelinesForCommit", ctx, projectWithNS, commitSHA)
	ret0, _ := ret[0].([]vcs.ProjectPipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelinesForCommit indicates an expected call of GetPipelinesForCommit.
func (mr *MockGitClientMockRecorder) GetPipelinesForCommit(ctx, projectWithNS, commitSHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelinesForCommit", reflect.TypeOf((*MockGitClient)(nil).GetPipelinesForCommit), ctx, projectWithNS, commitSHA)
}

// GetRepoFile mocks base method.
func (m *MockGitClient) GetRepoFile(arg0 context.Context, arg1, arg2, arg3 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoFile indicates an expected call of GetRepoFile.
func (mr *MockGitClientMockRecorder) GetRepoFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoFile", reflect.TypeOf((*MockGitClient)(nil).GetRepoFile), arg0, arg1, arg2, arg3)
}

// ResolveMergeRequestDiscussion mocks base method.
func (m *MockGitClient) ResolveMergeRequestDiscussion(arg0 context.Context, arg1 string, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveMergeRequestDiscussion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveMergeRequestDiscussion indicates an expected call of ResolveMergeRequestDiscussion.
func (mr *MockGitClientMockRecorder) ResolveMergeRequestDiscussion(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveMergeRequestDiscussion", reflect.TypeOf((*MockGitClient)(nil).ResolveMergeRequestDiscussion), arg0, arg1, arg2, arg3)
}

// SetCommitStatus mocks base method.
func (m *MockGitClient) SetCommitStatus(ctx context.Context, projectWithNS, commitSHA string, status vcs.CommitStatusOptions) (vcs.CommitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommitStatus", ctx, projectWithNS, commitSHA, status)
	ret0, _ := ret[0].(vcs.CommitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCommitStatus indicates an expected call of SetCommitStatus.
func (mr *MockGitClientMockRecorder) SetCommitStatus(ctx, projectWithNS, commitSHA, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommitStatus", reflect.TypeOf((*MockGitClient)(nil).SetCommitStatus), ctx, projectWithNS, commitSHA, status)
}

// UpdateMergeRequestDiscussionNote mocks base method.
func (m *MockGitClient) UpdateMergeRequestDiscussionNote(ctx context.Context, mrIID, noteID int, project, discussionID, comment string) (vcs.MRNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMergeRequestDiscussionNote", ctx, mrIID, noteID, project, discussionID, comment)
	ret0, _ := ret[0].(vcs.MRNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMergeRequestDiscussionNote indicates an expected call of UpdateMergeRequestDiscussionNote.
func (mr *MockGitClientMockRecorder) UpdateMergeRequestDiscussionNote(ctx, mrIID, noteID, project, discussionID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMergeRequestDiscussionNote", reflect.TypeOf((*MockGitClient)(nil).UpdateMergeRequestDiscussionNote), ctx, mrIID, noteID, project, discussionID, comment)
}

// MockGitRepo is a mock of GitRepo interface.
type MockGitRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepoMockRecorder
}

// MockGitRepoMockRecorder is the mock recorder for MockGitRepo.
type MockGitRepoMockRecorder struct {
	mock *MockGitRepo
}

// NewMockGitRepo creates a new mock instance.
func NewMockGitRepo(ctrl *gomock.Controller) *MockGitRepo {
	mock := &MockGitRepo{ctrl: ctrl}
	mock.recorder = &MockGitRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepo) EXPECT() *MockGitRepoMockRecorder {
	return m.recorder
}

// FetchUpstreamBranch mocks base method.
func (m *MockGitRepo) FetchUpstreamBranch(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUpstreamBranch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchUpstreamBranch indicates an expected call of FetchUpstreamBranch.
func (mr *MockGitRepoMockRecorder) FetchUpstreamBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUpstreamBranch", reflect.TypeOf((*MockGitRepo)(nil).FetchUpstreamBranch), arg0)
}

// GetLocalDirectory mocks base method.
func (m *MockGitRepo) GetLocalDirectory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalDirectory")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocalDirectory indicates an expected call of GetLocalDirectory.
func (mr *MockGitRepoMockRecorder) GetLocalDirectory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalDirectory", reflect.TypeOf((*MockGitRepo)(nil).GetLocalDirectory))
}

// GetMergeBase mocks base method.
func (m *MockGitRepo) GetMergeBase(oldest, newest string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeBase", oldest, newest)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeBase indicates an expected call of GetMergeBase.
func (mr *MockGitRepoMockRecorder) GetMergeBase(oldest, newest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeBase", reflect.TypeOf((*MockGitRepo)(nil).GetMergeBase), oldest, newest)
}

// GetModifiedFileNamesBetweenCommits mocks base method.
func (m *MockGitRepo) GetModifiedFileNamesBetweenCommits(oldest, newest string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModifiedFileNamesBetweenCommits", oldest, newest)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModifiedFileNamesBetweenCommits indicates an expected call of GetModifiedFileNamesBetweenCommits.
func (mr *MockGitRepoMockRecorder) GetModifiedFileNamesBetweenCommits(oldest, newest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModifiedFileNamesBetweenCommits", reflect.TypeOf((*MockGitRepo)(nil).GetModifiedFileNamesBetweenCommits), oldest, newest)
}

// MockMRApproved is a mock of MRApproved interface.
type MockMRApproved struct {
	ctrl     *gomock.Controller
	recorder *MockMRApprovedMockRecorder
}

// MockMRApprovedMockRecorder is the mock recorder for MockMRApproved.
type MockMRApprovedMockRecorder struct {
	mock *MockMRApproved
}

// NewMockMRApproved creates a new mock instance.
func NewMockMRApproved(ctrl *gomock.Controller) *MockMRApproved {
	mock := &MockMRApproved{ctrl: ctrl}
	mock.recorder = &MockMRApprovedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMRApproved) EXPECT() *MockMRApprovedMockRecorder {
	return m.recorder
}

// IsApproved mocks base method.
func (m *MockMRApproved) IsApproved() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApproved")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsApproved indicates an expected call of IsApproved.
func (mr *MockMRApprovedMockRecorder) IsApproved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApproved", reflect.TypeOf((*MockMRApproved)(nil).IsApproved))
}

// MockMRDiscussion is a mock of MRDiscussion interface.
type MockMRDiscussion struct {
	ctrl     *gomock.Controller
	recorder *MockMRDiscussionMockRecorder
}

// MockMRDiscussionMockRecorder is the mock recorder for MockMRDiscussion.
type MockMRDiscussionMockRecorder struct {
	mock *MockMRDiscussion
}

// NewMockMRDiscussion creates a new mock instance.
func NewMockMRDiscussion(ctrl *gomock.Controller) *MockMRDiscussion {
	mock := &MockMRDiscussion{ctrl: ctrl}
	mock.recorder = &MockMRDiscussionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMRDiscussion) EXPECT() *MockMRDiscussionMockRecorder {
	return m.recorder
}

// GetDiscussionID mocks base method.
func (m *MockMRDiscussion) GetDiscussionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscussionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDiscussionID indicates an expected call of GetDiscussionID.
func (mr *MockMRDiscussionMockRecorder) GetDiscussionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscussionID", reflect.TypeOf((*MockMRDiscussion)(nil).GetDiscussionID))
}

// MockMRDiscussionNotes is a mock of MRDiscussionNotes interface.
type MockMRDiscussionNotes struct {
	ctrl     *gomock.Controller
	recorder *MockMRDiscussionNotesMockRecorder
}

// MockMRDiscussionNotesMockRecorder is the mock recorder for MockMRDiscussionNotes.
type MockMRDiscussionNotesMockRecorder struct {
	mock *MockMRDiscussionNotes
}

// NewMockMRDiscussionNotes creates a new mock instance.
func NewMockMRDiscussionNotes(ctrl *gomock.Controller) *MockMRDiscussionNotes {
	mock := &MockMRDiscussionNotes{ctrl: ctrl}
	mock.recorder = &MockMRDiscussionNotesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMRDiscussionNotes) EXPECT() *MockMRDiscussionNotesMockRecorder {
	return m.recorder
}

// GetDiscussionID mocks base method.
func (m *MockMRDiscussionNotes) GetDiscussionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscussionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDiscussionID indicates an expected call of GetDiscussionID.
func (mr *MockMRDiscussionNotesMockRecorder) GetDiscussionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscussionID", reflect.TypeOf((*MockMRDiscussionNotes)(nil).GetDiscussionID))
}

// GetMRNotes mocks base method.
func (m *MockMRDiscussionNotes) GetMRNotes() []vcs.MRNote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMRNotes")
	ret0, _ := ret[0].([]vcs.MRNote)
	return ret0
}

// GetMRNotes indicates an expected call of GetMRNotes.
func (mr *MockMRDiscussionNotesMockRecorder) GetMRNotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMRNotes", reflect.TypeOf((*MockMRDiscussionNotes)(nil).GetMRNotes))
}

// MockMRNote is a mock of MRNote interface.
type MockMRNote struct {
	ctrl     *gomock.Controller
	recorder *MockMRNoteMockRecorder
}

// MockMRNoteMockRecorder is the mock recorder for MockMRNote.
type MockMRNoteMockRecorder struct {
	mock *MockMRNote
}

// NewMockMRNote creates a new mock instance.
func NewMockMRNote(ctrl *gomock.Controller) *MockMRNote {
	mock := &MockMRNote{ctrl: ctrl}
	mock.recorder = &MockMRNoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMRNote) EXPECT() *MockMRNoteMockRecorder {
	return m.recorder
}

// GetNoteID mocks base method.
func (m *MockMRNote) GetNoteID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetNoteID indicates an expected call of GetNoteID.
func (mr *MockMRNoteMockRecorder) GetNoteID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteID", reflect.TypeOf((*MockMRNote)(nil).GetNoteID))
}

// MockDetailedMR is a mock of DetailedMR interface.
type MockDetailedMR struct {
	ctrl     *gomock.Controller
	recorder *MockDetailedMRMockRecorder
}

// MockDetailedMRMockRecorder is the mock recorder for MockDetailedMR.
type MockDetailedMRMockRecorder struct {
	mock *MockDetailedMR
}

// NewMockDetailedMR creates a new mock instance.
func NewMockDetailedMR(ctrl *gomock.Controller) *MockDetailedMR {
	mock := &MockDetailedMR{ctrl: ctrl}
	mock.recorder = &MockDetailedMRMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetailedMR) EXPECT() *MockDetailedMRMockRecorder {
	return m.recorder
}

// GetAuthor mocks base method.
func (m *MockDetailedMR) GetAuthor() vcs.MRAuthor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor")
	ret0, _ := ret[0].(vcs.MRAuthor)
	return ret0
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockDetailedMRMockRecorder) GetAuthor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockDetailedMR)(nil).GetAuthor))
}

// GetInternalID mocks base method.
func (m *MockDetailedMR) GetInternalID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInternalID indicates an expected call of GetInternalID.
func (mr *MockDetailedMRMockRecorder) GetInternalID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalID", reflect.TypeOf((*MockDetailedMR)(nil).GetInternalID))
}

// GetSourceBranch mocks base method.
func (m *MockDetailedMR) GetSourceBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceBranch indicates an expected call of GetSourceBranch.
func (mr *MockDetailedMRMockRecorder) GetSourceBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceBranch", reflect.TypeOf((*MockDetailedMR)(nil).GetSourceBranch))
}

// GetTargetBranch mocks base method.
func (m *MockDetailedMR) GetTargetBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTargetBranch indicates an expected call of GetTargetBranch.
func (mr *MockDetailedMRMockRecorder) GetTargetBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetBranch", reflect.TypeOf((*MockDetailedMR)(nil).GetTargetBranch))
}

// GetTitle mocks base method.
func (m *MockDetailedMR) GetTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTitle indicates an expected call of GetTitle.
func (mr *MockDetailedMRMockRecorder) GetTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitle", reflect.TypeOf((*MockDetailedMR)(nil).GetTitle))
}

// GetWebURL mocks base method.
func (m *MockDetailedMR) GetWebURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWebURL indicates an expected call of GetWebURL.
func (mr *MockDetailedMRMockRecorder) GetWebURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebURL", reflect.TypeOf((*MockDetailedMR)(nil).GetWebURL))
}

// HasConflicts mocks base method.
func (m *MockDetailedMR) HasConflicts() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasConflicts")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasConflicts indicates an expected call of HasConflicts.
func (mr *MockDetailedMRMockRecorder) HasConflicts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasConflicts", reflect.TypeOf((*MockDetailedMR)(nil).HasConflicts))
}

// MockMR is a mock of MR interface.
type MockMR struct {
	ctrl     *gomock.Controller
	recorder *MockMRMockRecorder
}

// MockMRMockRecorder is the mock recorder for MockMR.
type MockMRMockRecorder struct {
	mock *MockMR
}

// NewMockMR creates a new mock instance.
func NewMockMR(ctrl *gomock.Controller) *MockMR {
	mock := &MockMR{ctrl: ctrl}
	mock.recorder = &MockMRMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMR) EXPECT() *MockMRMockRecorder {
	return m.recorder
}

// GetAuthor mocks base method.
func (m *MockMR) GetAuthor() vcs.MRAuthor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor")
	ret0, _ := ret[0].(vcs.MRAuthor)
	return ret0
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockMRMockRecorder) GetAuthor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockMR)(nil).GetAuthor))
}

// GetInternalID mocks base method.
func (m *MockMR) GetInternalID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInternalID indicates an expected call of GetInternalID.
func (mr *MockMRMockRecorder) GetInternalID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalID", reflect.TypeOf((*MockMR)(nil).GetInternalID))
}

// GetSourceBranch mocks base method.
func (m *MockMR) GetSourceBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceBranch indicates an expected call of GetSourceBranch.
func (mr *MockMRMockRecorder) GetSourceBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceBranch", reflect.TypeOf((*MockMR)(nil).GetSourceBranch))
}

// GetTargetBranch mocks base method.
func (m *MockMR) GetTargetBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTargetBranch indicates an expected call of GetTargetBranch.
func (mr *MockMRMockRecorder) GetTargetBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetBranch", reflect.TypeOf((*MockMR)(nil).GetTargetBranch))
}

// MockMRBranches is a mock of MRBranches interface.
type MockMRBranches struct {
	ctrl     *gomock.Controller
	recorder *MockMRBranchesMockRecorder
}

// MockMRBranchesMockRecorder is the mock recorder for MockMRBranches.
type MockMRBranchesMockRecorder struct {
	mock *MockMRBranches
}

// NewMockMRBranches creates a new mock instance.
func NewMockMRBranches(ctrl *gomock.Controller) *MockMRBranches {
	mock := &MockMRBranches{ctrl: ctrl}
	mock.recorder = &MockMRBranchesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMRBranches) EXPECT() *MockMRBranchesMockRecorder {
	return m.recorder
}

// GetSourceBranch mocks base method.
func (m *MockMRBranches) GetSourceBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceBranch indicates an expected call of GetSourceBranch.
func (mr *MockMRBranchesMockRecorder) GetSourceBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceBranch", reflect.TypeOf((*MockMRBranches)(nil).GetSourceBranch))
}

// GetTargetBranch mocks base method.
func (m *MockMRBranches) GetTargetBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTargetBranch indicates an expected call of GetTargetBranch.
func (mr *MockMRBranchesMockRecorder) GetTargetBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetBranch", reflect.TypeOf((*MockMRBranches)(nil).GetTargetBranch))
}

// MockMRAuthor is a mock of MRAuthor interface.
type MockMRAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockMRAuthorMockRecorder
}

// MockMRAuthorMockRecorder is the mock recorder for MockMRAuthor.
type MockMRAuthorMockRecorder struct {
	mock *MockMRAuthor
}

// NewMockMRAuthor creates a new mock instance.
func NewMockMRAuthor(ctrl *gomock.Controller) *MockMRAuthor {
	mock := &MockMRAuthor{ctrl: ctrl}
	mock.recorder = &MockMRAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMRAuthor) EXPECT() *MockMRAuthorMockRecorder {
	return m.recorder
}

// GetUsername mocks base method.
func (m *MockMRAuthor) GetUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername.
func (mr *MockMRAuthorMockRecorder) GetUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockMRAuthor)(nil).GetUsername))
}

// MockCommitStatusOptions is a mock of CommitStatusOptions interface.
type MockCommitStatusOptions struct {
	ctrl     *gomock.Controller
	recorder *MockCommitStatusOptionsMockRecorder
}

// MockCommitStatusOptionsMockRecorder is the mock recorder for MockCommitStatusOptions.
type MockCommitStatusOptionsMockRecorder struct {
	mock *MockCommitStatusOptions
}

// NewMockCommitStatusOptions creates a new mock instance.
func NewMockCommitStatusOptions(ctrl *gomock.Controller) *MockCommitStatusOptions {
	mock := &MockCommitStatusOptions{ctrl: ctrl}
	mock.recorder = &MockCommitStatusOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitStatusOptions) EXPECT() *MockCommitStatusOptionsMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockCommitStatusOptions) GetContext() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockCommitStatusOptionsMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockCommitStatusOptions)(nil).GetContext))
}

// GetDescription mocks base method.
func (m *MockCommitStatusOptions) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockCommitStatusOptionsMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockCommitStatusOptions)(nil).GetDescription))
}

// GetName mocks base method.
func (m *MockCommitStatusOptions) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockCommitStatusOptionsMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockCommitStatusOptions)(nil).GetName))
}

// GetPipelineID mocks base method.
func (m *MockCommitStatusOptions) GetPipelineID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPipelineID indicates an expected call of GetPipelineID.
func (mr *MockCommitStatusOptionsMockRecorder) GetPipelineID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineID", reflect.TypeOf((*MockCommitStatusOptions)(nil).GetPipelineID))
}

// GetState mocks base method.
func (m *MockCommitStatusOptions) GetState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockCommitStatusOptionsMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockCommitStatusOptions)(nil).GetState))
}

// GetTargetURL mocks base method.
func (m *MockCommitStatusOptions) GetTargetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTargetURL indicates an expected call of GetTargetURL.
func (mr *MockCommitStatusOptionsMockRecorder) GetTargetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetURL", reflect.TypeOf((*MockCommitStatusOptions)(nil).GetTargetURL))
}

// MockCommitStatus is a mock of CommitStatus interface.
type MockCommitStatus struct {
	ctrl     *gomock.Controller
	recorder *MockCommitStatusMockRecorder
}

// MockCommitStatusMockRecorder is the mock recorder for MockCommitStatus.
type MockCommitStatusMockRecorder struct {
	mock *MockCommitStatus
}

// NewMockCommitStatus creates a new mock instance.
func NewMockCommitStatus(ctrl *gomock.Controller) *MockCommitStatus {
	mock := &MockCommitStatus{ctrl: ctrl}
	mock.recorder = &MockCommitStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitStatus) EXPECT() *MockCommitStatusMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockCommitStatus) Info() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockCommitStatusMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockCommitStatus)(nil).Info))
}

// MockProjectPipeline is a mock of ProjectPipeline interface.
type MockProjectPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockProjectPipelineMockRecorder
}

// MockProjectPipelineMockRecorder is the mock recorder for MockProjectPipeline.
type MockProjectPipelineMockRecorder struct {
	mock *MockProjectPipeline
}

// NewMockProjectPipeline creates a new mock instance.
func NewMockProjectPipeline(ctrl *gomock.Controller) *MockProjectPipeline {
	mock := &MockProjectPipeline{ctrl: ctrl}
	mock.recorder = &MockProjectPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectPipeline) EXPECT() *MockProjectPipelineMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockProjectPipeline) GetID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockProjectPipelineMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockProjectPipeline)(nil).GetID))
}

// GetSource mocks base method.
func (m *MockProjectPipeline) GetSource() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSource")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSource indicates an expected call of GetSource.
func (mr *MockProjectPipelineMockRecorder) GetSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSource", reflect.TypeOf((*MockProjectPipeline)(nil).GetSource))
}

// MockProject is a mock of Project interface.
type MockProject struct {
	ctrl     *gomock.Controller
	recorder *MockProjectMockRecorder
}

// MockProjectMockRecorder is the mock recorder for MockProject.
type MockProjectMockRecorder struct {
	mock *MockProject
}

// NewMockProject creates a new mock instance.
func NewMockProject(ctrl *gomock.Controller) *MockProject {
	mock := &MockProject{ctrl: ctrl}
	mock.recorder = &MockProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProject) EXPECT() *MockProjectMockRecorder {
	return m.recorder
}

// GetPathWithNamespace mocks base method.
func (m *MockProject) GetPathWithNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathWithNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPathWithNamespace indicates an expected call of GetPathWithNamespace.
func (mr *MockProjectMockRecorder) GetPathWithNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathWithNamespace", reflect.TypeOf((*MockProject)(nil).GetPathWithNamespace))
}

// MockMRCommentEvent is a mock of MRCommentEvent interface.
type MockMRCommentEvent struct {
	ctrl     *gomock.Controller
	recorder *MockMRCommentEventMockRecorder
}

// MockMRCommentEventMockRecorder is the mock recorder for MockMRCommentEvent.
type MockMRCommentEventMockRecorder struct {
	mock *MockMRCommentEvent
}

// NewMockMRCommentEvent creates a new mock instance.
func NewMockMRCommentEvent(ctrl *gomock.Controller) *MockMRCommentEvent {
	mock := &MockMRCommentEvent{ctrl: ctrl}
	mock.recorder = &MockMRCommentEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMRCommentEvent) EXPECT() *MockMRCommentEventMockRecorder {
	return m.recorder
}

// GetAttributes mocks base method.
func (m *MockMRCommentEvent) GetAttributes() vcs.MRAttributes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributes")
	ret0, _ := ret[0].(vcs.MRAttributes)
	return ret0
}

// GetAttributes indicates an expected call of GetAttributes.
func (mr *MockMRCommentEventMockRecorder) GetAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributes", reflect.TypeOf((*MockMRCommentEvent)(nil).GetAttributes))
}

// GetLastCommit mocks base method.
func (m *MockMRCommentEvent) GetLastCommit() vcs.Commit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommit")
	ret0, _ := ret[0].(vcs.Commit)
	return ret0
}

// GetLastCommit indicates an expected call of GetLastCommit.
func (mr *MockMRCommentEventMockRecorder) GetLastCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommit", reflect.TypeOf((*MockMRCommentEvent)(nil).GetLastCommit))
}

// GetMR mocks base method.
func (m *MockMRCommentEvent) GetMR() vcs.MR {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMR")
	ret0, _ := ret[0].(vcs.MR)
	return ret0
}

// GetMR indicates an expected call of GetMR.
func (mr *MockMRCommentEventMockRecorder) GetMR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMR", reflect.TypeOf((*MockMRCommentEvent)(nil).GetMR))
}

// GetProject mocks base method.
func (m *MockMRCommentEvent) GetProject() vcs.Project {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject")
	ret0, _ := ret[0].(vcs.Project)
	return ret0
}

// GetProject indicates an expected call of GetProject.
func (mr *MockMRCommentEventMockRecorder) GetProject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockMRCommentEvent)(nil).GetProject))
}

// MockMRAttributes is a mock of MRAttributes interface.
type MockMRAttributes struct {
	ctrl     *gomock.Controller
	recorder *MockMRAttributesMockRecorder
}

// MockMRAttributesMockRecorder is the mock recorder for MockMRAttributes.
type MockMRAttributesMockRecorder struct {
	mock *MockMRAttributes
}

// NewMockMRAttributes creates a new mock instance.
func NewMockMRAttributes(ctrl *gomock.Controller) *MockMRAttributes {
	mock := &MockMRAttributes{ctrl: ctrl}
	mock.recorder = &MockMRAttributesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMRAttributes) EXPECT() *MockMRAttributesMockRecorder {
	return m.recorder
}

// GetDiscussionID mocks base method.
func (m *MockMRAttributes) GetDiscussionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscussionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDiscussionID indicates an expected call of GetDiscussionID.
func (mr *MockMRAttributesMockRecorder) GetDiscussionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscussionID", reflect.TypeOf((*MockMRAttributes)(nil).GetDiscussionID))
}

// GetNote mocks base method.
func (m *MockMRAttributes) GetNote() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNote indicates an expected call of GetNote.
func (mr *MockMRAttributesMockRecorder) GetNote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockMRAttributes)(nil).GetNote))
}

// GetType mocks base method.
func (m *MockMRAttributes) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockMRAttributesMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockMRAttributes)(nil).GetType))
}

// MockCommit is a mock of Commit interface.
type MockCommit struct {
	ctrl     *gomock.Controller
	recorder *MockCommitMockRecorder
}

// MockCommitMockRecorder is the mock recorder for MockCommit.
type MockCommitMockRecorder struct {
	mock *MockCommit
}

// NewMockCommit creates a new mock instance.
func NewMockCommit(ctrl *gomock.Controller) *MockCommit {
	mock := &MockCommit{ctrl: ctrl}
	mock.recorder = &MockCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommit) EXPECT() *MockCommitMockRecorder {
	return m.recorder
}

// GetSHA mocks base method.
func (m *MockCommit) GetSHA() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSHA")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSHA indicates an expected call of GetSHA.
func (mr *MockCommitMockRecorder) GetSHA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSHA", reflect.TypeOf((*MockCommit)(nil).GetSHA))
}
